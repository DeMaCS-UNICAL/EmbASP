//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SPDGrammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SPDGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, BOOLEAN=8, INTEGER=9, 
		STRING=10, WHITE_SPACE=11;
	public const int
		RULE_array = 0, RULE_json = 1, RULE_oBjEcT = 2, RULE_pair = 3, RULE_value = 4;
	public static readonly string[] ruleNames = {
		"array", "json", "oBjEcT", "pair", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'", "'{'", "'}'", "':'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "BOOLEAN", "INTEGER", 
		"STRING", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPDGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SPDGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPDGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPDGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 0, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(T__0);
			State = 11; value();
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 12; Match(T__1);
				State = 13; value();
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 19; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 2, RULE_json);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__6) | (1L << BOOLEAN) | (1L << INTEGER) | (1L << STRING))) != 0)) {
				{
				{
				State = 21; value();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OBjEcTContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public OBjEcTContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oBjEcT; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOBjEcT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OBjEcTContext oBjEcT() {
		OBjEcTContext _localctx = new OBjEcTContext(Context, State);
		EnterRule(_localctx, 4, RULE_oBjEcT);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; Match(T__3);
				State = 28; pair();
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 29; Match(T__1);
					State = 30; pair();
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 36; Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; Match(T__3);
				State = 39; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SPDGrammarParser.STRING, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(STRING);
			State = 43; Match(T__5);
			State = 44; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullValueContext : ValueContext {
		public NullValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectValueContext : ValueContext {
		public OBjEcTContext oBjEcT() {
			return GetRuleContext<OBjEcTContext>(0);
		}
		public ObjectValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanValueContext : ValueContext {
		public ITerminalNode BOOLEAN() { return GetToken(SPDGrammarParser.BOOLEAN, 0); }
		public BooleanValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerValueContext : ValueContext {
		public ITerminalNode INTEGER() { return GetToken(SPDGrammarParser.INTEGER, 0); }
		public IntegerValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(SPDGrammarParser.STRING, 0); }
		public StringValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayValueContext : ValueContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ArrayValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPDGrammarVisitor<TResult> typedVisitor = visitor as ISPDGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new ArrayValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; array();
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(BOOLEAN);
				}
				break;
			case INTEGER:
				_localctx = new IntegerValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; Match(INTEGER);
				}
				break;
			case T__6:
				_localctx = new NullValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 49; Match(T__6);
				}
				break;
			case T__3:
				_localctx = new ObjectValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 50; oBjEcT();
				}
				break;
			case STRING:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 51; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x11', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x14', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x19', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\"', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '%', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '+', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x37', '\n', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x2', '\x2', '<', '\x2', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '*', '\x3', '\x2', 
		'\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\r', '\a', '\x3', '\x2', '\x2', '\r', '\x12', 
		'\x5', '\n', '\x6', '\x2', '\xE', '\xF', '\a', '\x4', '\x2', '\x2', '\xF', 
		'\x11', '\x5', '\n', '\x6', '\x2', '\x10', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x14', '\x3', '\x2', '\x2', '\x2', '\x12', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x16', '\a', '\x5', '\x2', '\x2', '\x16', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\n', '\x6', '\x2', '\x18', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x6', '\x2', 
		'\x2', '\x1E', '#', '\x5', '\b', '\x5', '\x2', '\x1F', ' ', '\a', '\x4', 
		'\x2', '\x2', ' ', '\"', '\x5', '\b', '\x5', '\x2', '!', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', 
		'&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\a', '\a', '\x2', '\x2', '\'', '+', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\a', '\x6', '\x2', '\x2', ')', '+', '\a', '\a', '\x2', '\x2', 
		'*', '\x1D', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '+', '\a', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\f', '\x2', 
		'\x2', '-', '.', '\a', '\b', '\x2', '\x2', '.', '/', '\x5', '\n', '\x6', 
		'\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x37', '\x5', '\x2', 
		'\x2', '\x2', '\x31', '\x37', '\a', '\n', '\x2', '\x2', '\x32', '\x37', 
		'\a', '\v', '\x2', '\x2', '\x33', '\x37', '\a', '\t', '\x2', '\x2', '\x34', 
		'\x37', '\x5', '\x6', '\x4', '\x2', '\x35', '\x37', '\a', '\f', '\x2', 
		'\x2', '\x36', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x32', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x12', '\x1A', '#', '*', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
