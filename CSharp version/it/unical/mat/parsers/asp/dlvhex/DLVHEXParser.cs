//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DLVHEXParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DLVHEXParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HEADER=1, WHITE_SPACE=2, COLON=3, COMMA=4, COST_BEGIN=5, COST_END=6, INTEGER=7, 
		LEVEL_BEGIN=8, LEVEL_END=9, GROUND_QUERY_BEGIN=10, ANSWER_SET_BEGIN=11, 
		ANSWER_SET_END=12, IDENTIFIER=13, STRING_CONSTANT=14, TERMS_BEGIN=15, 
		TERMS_END=16, REASONING=17, DOT=18, BOOLEAN=19, WHITESPACE_IN_GROUND_QUERY=20, 
		WITNESS_LABEL=21;
	public const int
		RULE_answer_set = 0, RULE_atoms = 1, RULE_cost = 2, RULE_level = 3, RULE_output = 4, 
		RULE_predicate_atom = 5, RULE_term = 6, RULE_witness = 7;
	public static readonly string[] ruleNames = {
		"answer_set", "atoms", "cost", "level", "output", "predicate_atom", "term", 
		"witness"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "':'", "','", "'<'", "'>'", null, "'['", "']'", "' is '", 
		"'{'", "'}'", null, null, "'('", "')'", null, "'.'", null, null, "', evidenced by'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HEADER", "WHITE_SPACE", "COLON", "COMMA", "COST_BEGIN", "COST_END", 
		"INTEGER", "LEVEL_BEGIN", "LEVEL_END", "GROUND_QUERY_BEGIN", "ANSWER_SET_BEGIN", 
		"ANSWER_SET_END", "IDENTIFIER", "STRING_CONSTANT", "TERMS_BEGIN", "TERMS_END", 
		"REASONING", "DOT", "BOOLEAN", "WHITESPACE_IN_GROUND_QUERY", "WITNESS_LABEL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DLVHEXParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DLVHEXParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DLVHEXParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DLVHEXParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Answer_setContext : ParserRuleContext {
		public Answer_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_answer_set; } }
	 
		public Answer_setContext() { }
		public virtual void CopyFrom(Answer_setContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroundQueryContext : Answer_setContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DLVHEXParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DLVHEXParser.IDENTIFIER, i);
		}
		public ITerminalNode GROUND_QUERY_BEGIN() { return GetToken(DLVHEXParser.GROUND_QUERY_BEGIN, 0); }
		public ITerminalNode REASONING() { return GetToken(DLVHEXParser.REASONING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(DLVHEXParser.BOOLEAN, 0); }
		public ITerminalNode DOT() { return GetToken(DLVHEXParser.DOT, 0); }
		public WitnessContext witness() {
			return GetRuleContext<WitnessContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DLVHEXParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLVHEXParser.COMMA, i);
		}
		public GroundQueryContext(Answer_setContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroundQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModelContext : Answer_setContext {
		public AtomsContext atoms() {
			return GetRuleContext<AtomsContext>(0);
		}
		public ModelContext(Answer_setContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Answer_setContext answer_set() {
		Answer_setContext _localctx = new Answer_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_answer_set);
		int _la;
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new GroundQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; Match(IDENTIFIER);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 17; Match(COMMA);
					State = 18; Match(IDENTIFIER);
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 24; Match(GROUND_QUERY_BEGIN);
				State = 25; Match(REASONING);
				State = 26; Match(BOOLEAN);
				State = 29;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 27; Match(DOT);
					}
					break;
				case WITNESS_LABEL:
					{
					State = 28; witness();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ANSWER_SET_BEGIN:
				_localctx = new ModelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; atoms();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomsContext : ParserRuleContext {
		public ITerminalNode ANSWER_SET_BEGIN() { return GetToken(DLVHEXParser.ANSWER_SET_BEGIN, 0); }
		public ITerminalNode ANSWER_SET_END() { return GetToken(DLVHEXParser.ANSWER_SET_END, 0); }
		public Predicate_atomContext[] predicate_atom() {
			return GetRuleContexts<Predicate_atomContext>();
		}
		public Predicate_atomContext predicate_atom(int i) {
			return GetRuleContext<Predicate_atomContext>(i);
		}
		public CostContext cost() {
			return GetRuleContext<CostContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DLVHEXParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLVHEXParser.COMMA, i);
		}
		public AtomsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atoms; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtoms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomsContext atoms() {
		AtomsContext _localctx = new AtomsContext(Context, State);
		EnterRule(_localctx, 2, RULE_atoms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(ANSWER_SET_BEGIN);
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 35; predicate_atom();
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 36; Match(COMMA);
					State = 37; predicate_atom();
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 45; Match(ANSWER_SET_END);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COST_BEGIN) {
				{
				State = 46; cost();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CostContext : ParserRuleContext {
		public ITerminalNode COST_BEGIN() { return GetToken(DLVHEXParser.COST_BEGIN, 0); }
		public LevelContext[] level() {
			return GetRuleContexts<LevelContext>();
		}
		public LevelContext level(int i) {
			return GetRuleContext<LevelContext>(i);
		}
		public ITerminalNode COST_END() { return GetToken(DLVHEXParser.COST_END, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DLVHEXParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLVHEXParser.COMMA, i);
		}
		public CostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CostContext cost() {
		CostContext _localctx = new CostContext(Context, State);
		EnterRule(_localctx, 4, RULE_cost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(COST_BEGIN);
			State = 50; level();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 51; Match(COMMA);
				State = 52; level();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58; Match(COST_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		public ITerminalNode LEVEL_BEGIN() { return GetToken(DLVHEXParser.LEVEL_BEGIN, 0); }
		public ITerminalNode[] INTEGER() { return GetTokens(DLVHEXParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(DLVHEXParser.INTEGER, i);
		}
		public ITerminalNode COLON() { return GetToken(DLVHEXParser.COLON, 0); }
		public ITerminalNode LEVEL_END() { return GetToken(DLVHEXParser.LEVEL_END, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 6, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(LEVEL_BEGIN);
			State = 61; Match(INTEGER);
			State = 62; Match(COLON);
			State = 63; Match(INTEGER);
			State = 64; Match(LEVEL_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public Answer_setContext[] answer_set() {
			return GetRuleContexts<Answer_setContext>();
		}
		public Answer_setContext answer_set(int i) {
			return GetRuleContext<Answer_setContext>(i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANSWER_SET_BEGIN || _la==IDENTIFIER) {
				{
				{
				State = 66; answer_set();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predicate_atomContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DLVHEXParser.IDENTIFIER, 0); }
		public ITerminalNode TERMS_BEGIN() { return GetToken(DLVHEXParser.TERMS_BEGIN, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode TERMS_END() { return GetToken(DLVHEXParser.TERMS_END, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DLVHEXParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLVHEXParser.COMMA, i);
		}
		public Predicate_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predicate_atomContext predicate_atom() {
		Predicate_atomContext _localctx = new Predicate_atomContext(Context, State);
		EnterRule(_localctx, 10, RULE_predicate_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(IDENTIFIER);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TERMS_BEGIN) {
				{
				State = 73; Match(TERMS_BEGIN);
				State = 74; term();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 75; Match(COMMA);
					State = 76; term();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 82; Match(TERMS_END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DLVHEXParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(DLVHEXParser.INTEGER, 0); }
		public Predicate_atomContext predicate_atom() {
			return GetRuleContext<Predicate_atomContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(DLVHEXParser.STRING_CONSTANT, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(INTEGER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; predicate_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; Match(STRING_CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WitnessContext : ParserRuleContext {
		public ITerminalNode WITNESS_LABEL() { return GetToken(DLVHEXParser.WITNESS_LABEL, 0); }
		public AtomsContext atoms() {
			return GetRuleContext<AtomsContext>(0);
		}
		public WitnessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_witness; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLVHEXParserVisitor<TResult> typedVisitor = visitor as IDLVHEXParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWitness(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WitnessContext witness() {
		WitnessContext _localctx = new WitnessContext(Context, State);
		EnterRule(_localctx, 14, RULE_witness);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(WITNESS_LABEL);
			State = 93; atoms();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '\x62', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', ' ', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '#', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		')', '\n', '\x3', '\f', '\x3', '\xE', '\x3', ',', '\v', '\x3', '\x5', 
		'\x3', '.', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x32', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '\x38', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ';', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', '\x46', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'I', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'P', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'S', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'W', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', ']', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x2', '\x2', '\x2', '\x66', '\x2', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', '\n', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'J', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x10', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x17', '\a', '\xF', '\x2', '\x2', '\x13', '\x14', '\a', '\x6', 
		'\x2', '\x2', '\x14', '\x16', '\a', '\xF', '\x2', '\x2', '\x15', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\f', '\x2', '\x2', 
		'\x1B', '\x1C', '\a', '\x13', '\x2', '\x2', '\x1C', '\x1F', '\a', '\x15', 
		'\x2', '\x2', '\x1D', ' ', '\a', '\x14', '\x2', '\x2', '\x1E', ' ', '\x5', 
		'\x10', '\t', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '#', '\x5', '\x4', '\x3', '\x2', '\"', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '$', '-', '\a', '\r', '\x2', '\x2', '%', '*', '\x5', '\f', 
		'\a', '\x2', '&', '\'', '\a', '\x6', '\x2', '\x2', '\'', ')', '\x5', '\f', 
		'\a', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', 
		'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', '-', '%', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\a', 
		'\xE', '\x2', '\x2', '\x30', '\x32', '\x5', '\x6', '\x4', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\a', '\x2', '\x2', '\x34', '\x39', '\x5', '\b', '\x5', '\x2', '\x35', 
		'\x36', '\a', '\x6', '\x2', '\x2', '\x36', '\x38', '\x5', '\b', '\x5', 
		'\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\b', '\x2', 
		'\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\n', '\x2', 
		'\x2', '?', '@', '\a', '\t', '\x2', '\x2', '@', '\x41', '\a', '\x5', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\t', '\x2', '\x2', '\x42', '\x43', '\a', 
		'\v', '\x2', '\x2', '\x43', '\t', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\x5', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'V', '\a', 
		'\xF', '\x2', '\x2', 'K', 'L', '\a', '\x11', '\x2', '\x2', 'L', 'Q', '\x5', 
		'\xE', '\b', '\x2', 'M', 'N', '\a', '\x6', '\x2', '\x2', 'N', 'P', '\x5', 
		'\xE', '\b', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '\x12', '\x2', '\x2', 'U', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'K', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', ']', 
		'\a', '\xF', '\x2', '\x2', 'Y', ']', '\a', '\t', '\x2', '\x2', 'Z', ']', 
		'\x5', '\f', '\a', '\x2', '[', ']', '\a', '\x10', '\x2', '\x2', '\\', 
		'X', '\x3', '\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', 
		'\x2', ']', '\xF', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\x17', 
		'\x2', '\x2', '_', '`', '\x5', '\x4', '\x3', '\x2', '`', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x17', '\x1F', '\"', '*', '-', '\x31', '\x39', 
		'G', 'Q', 'V', '\\',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
