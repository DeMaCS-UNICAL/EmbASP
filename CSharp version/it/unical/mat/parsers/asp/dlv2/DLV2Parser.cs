//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DLV2Parser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class DLV2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		START=1, COST_LABEL=2, ANY=3, IGNORE=4, AT=5, INTEGER=6, NEW_LINE=7, BLANK_SPACE=8, 
		COMMA=9, INTEGER_CONSTANT=10, IDENTIFIER=11, MODEL_END=12, STRING_CONSTANT=13, 
		TERMS_BEGIN=14, TERMS_END=15, WHITE_SPACE=16;
	public const int
		RULE_answer_set = 0, RULE_cost = 1, RULE_level = 2, RULE_model = 3, RULE_output = 4, 
		RULE_predicate_atom = 5, RULE_term = 6;
	public static readonly string[] ruleNames = {
		"answer_set", "cost", "level", "model", "output", "predicate_atom", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", null, null, null, "'@'", null, null, null, "','", null, null, 
		"'}'", null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START", "COST_LABEL", "ANY", "IGNORE", "AT", "INTEGER", "NEW_LINE", 
		"BLANK_SPACE", "COMMA", "INTEGER_CONSTANT", "IDENTIFIER", "MODEL_END", 
		"STRING_CONSTANT", "TERMS_BEGIN", "TERMS_END", "WHITE_SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DLV2Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DLV2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DLV2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DLV2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Answer_setContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(DLV2Parser.START, 0); }
		public ModelContext model() {
			return GetRuleContext<ModelContext>(0);
		}
		public CostContext cost() {
			return GetRuleContext<CostContext>(0);
		}
		public Answer_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_answer_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnswer_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Answer_setContext answer_set() {
		Answer_setContext _localctx = new Answer_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_answer_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(START);
			State = 15; model();
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COST_LABEL) {
				{
				State = 16; cost();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CostContext : ParserRuleContext {
		public ITerminalNode COST_LABEL() { return GetToken(DLV2Parser.COST_LABEL, 0); }
		public ITerminalNode NEW_LINE() { return GetToken(DLV2Parser.NEW_LINE, 0); }
		public LevelContext[] level() {
			return GetRuleContexts<LevelContext>();
		}
		public LevelContext level(int i) {
			return GetRuleContext<LevelContext>(i);
		}
		public CostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CostContext cost() {
		CostContext _localctx = new CostContext(Context, State);
		EnterRule(_localctx, 2, RULE_cost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; Match(COST_LABEL);
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTEGER) {
				{
				{
				State = 20; level();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 26; Match(NEW_LINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelContext : ParserRuleContext {
		public ITerminalNode[] INTEGER() { return GetTokens(DLV2Parser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(DLV2Parser.INTEGER, i);
		}
		public ITerminalNode AT() { return GetToken(DLV2Parser.AT, 0); }
		public LevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelContext level() {
		LevelContext _localctx = new LevelContext(Context, State);
		EnterRule(_localctx, 4, RULE_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(INTEGER);
			State = 29; Match(AT);
			State = 30; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelContext : ParserRuleContext {
		public ITerminalNode MODEL_END() { return GetToken(DLV2Parser.MODEL_END, 0); }
		public Predicate_atomContext[] predicate_atom() {
			return GetRuleContexts<Predicate_atomContext>();
		}
		public Predicate_atomContext predicate_atom(int i) {
			return GetRuleContext<Predicate_atomContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DLV2Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLV2Parser.COMMA, i);
		}
		public ModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelContext model() {
		ModelContext _localctx = new ModelContext(Context, State);
		EnterRule(_localctx, 6, RULE_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 32; predicate_atom();
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 33; Match(COMMA);
					State = 34; predicate_atom();
					}
					}
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 42; Match(MODEL_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public Answer_setContext[] answer_set() {
			return GetRuleContexts<Answer_setContext>();
		}
		public Answer_setContext answer_set(int i) {
			return GetRuleContext<Answer_setContext>(i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START) {
				{
				{
				State = 44; answer_set();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predicate_atomContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DLV2Parser.IDENTIFIER, 0); }
		public ITerminalNode TERMS_BEGIN() { return GetToken(DLV2Parser.TERMS_BEGIN, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode TERMS_END() { return GetToken(DLV2Parser.TERMS_END, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DLV2Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DLV2Parser.COMMA, i);
		}
		public Predicate_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predicate_atomContext predicate_atom() {
		Predicate_atomContext _localctx = new Predicate_atomContext(Context, State);
		EnterRule(_localctx, 10, RULE_predicate_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(IDENTIFIER);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TERMS_BEGIN) {
				{
				State = 51; Match(TERMS_BEGIN);
				State = 52; term();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 53; Match(COMMA);
					State = 54; term();
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 60; Match(TERMS_END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DLV2Parser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(DLV2Parser.INTEGER_CONSTANT, 0); }
		public Predicate_atomContext predicate_atom() {
			return GetRuleContext<Predicate_atomContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(DLV2Parser.STRING_CONSTANT, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDLV2ParserVisitor<TResult> typedVisitor = visitor as IDLV2ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(INTEGER_CONSTANT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; predicate_atom();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67; Match(STRING_CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'I', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x14', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x18', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x1B', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '&', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', ')', '\v', '\x5', '\x5', '\x5', '+', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', '\x30', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x33', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', ':', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '=', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x41', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'G', '\n', '\b', '\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x2', '\x2', '\x2', 'K', '\x2', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x31', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x46', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x11', '\a', '\x3', '\x2', '\x2', '\x11', '\x13', '\x5', '\b', '\x5', 
		'\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x15', '\x19', '\a', '\x4', '\x2', 
		'\x2', '\x16', '\x18', '\x5', '\x6', '\x4', '\x2', '\x17', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\t', '\x2', '\x2', '\x1D', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', '\b', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\a', '\x2', '\x2', ' ', '!', '\a', '\b', '\x2', 
		'\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '\'', '\x5', '\f', 
		'\a', '\x2', '#', '$', '\a', '\v', '\x2', '\x2', '$', '&', '\x5', '\f', 
		'\a', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', 
		'\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', '*', '\"', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\a', '\xE', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x30', '\x5', '\x2', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '@', '\a', '\r', '\x2', '\x2', '\x35', '\x36', '\a', '\x10', 
		'\x2', '\x2', '\x36', ';', '\x5', '\xE', '\b', '\x2', '\x37', '\x38', 
		'\a', '\v', '\x2', '\x2', '\x38', ':', '\x5', '\xE', '\b', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '\x11', '\x2', '\x2', '?', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x35', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\r', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'G', '\a', '\r', '\x2', '\x2', '\x43', 'G', '\a', '\f', '\x2', '\x2', 
		'\x44', 'G', '\x5', '\f', '\a', '\x2', '\x45', 'G', '\a', '\xF', '\x2', 
		'\x2', '\x46', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x13', '\x19', '\'', '*', '\x31', ';', '@', '\x46',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
